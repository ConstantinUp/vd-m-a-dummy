{"ast":null,"code":"import _createClass from \"/home/constantin/workspace/vd-m-a-dummy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/constantin/workspace/vd-m-a-dummy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar nodeState = function nodeState() {\n  _classCallCheck(this, nodeState);\n};\n\nvar edgeState = function edgeState() {\n  _classCallCheck(this, edgeState);\n};\n\nexport var FTF = /*#__PURE__*/(function () {\n  var FTF = /*#__PURE__*/function () {\n    function FTF() {\n      _classCallCheck(this, FTF);\n\n      this.lastMessages = [];\n      this.orderQueue = [];\n      this.currentOrder = null;\n      this.id = FTF.count;\n      this.x = -100;\n      this.y = -100;\n      this.theta = 0;\n      this.batteryStatus = 0.0001;\n      FTF.count++;\n    }\n\n    _createClass(FTF, [{\n      key: \"getPosition\",\n      value: function getPosition() {\n        return {\n          'x': this.x,\n          'y': this.y,\n          'theta': this.theta\n        };\n      }\n    }, {\n      key: \"updatePosition\",\n      value: function updatePosition(x, y, theta) {\n        this.x = x;\n        this.y = y;\n        this.theta = theta;\n      }\n    }, {\n      key: \"updateBattery\",\n      value: function updateBattery(charge) {\n        if (charge > 1) {\n          charge = 1;\n        } else if (charge < 0) {\n          charge = 0;\n        }\n\n        this.batteryStatus = charge;\n      }\n    }, {\n      key: \"getBaseTopic\",\n      value: function getBaseTopic() {\n        return this.manufacturer + '/' + this.fleet + '/' + this.name;\n      }\n    }, {\n      key: \"addMessage\",\n      value: function addMessage(message) {\n        var newLength = this.lastMessages.unshift(message);\n\n        if (newLength > 10) {\n          this.lastMessages.pop();\n        }\n      }\n    }, {\n      key: \"getMessages\",\n      value: function getMessages() {\n        return this.lastMessages;\n      }\n    }, {\n      key: \"purgeMessages\",\n      value: function purgeMessages() {\n        this.lastMessages = [];\n      }\n    }, {\n      key: \"updateByMQTT\",\n      value: function updateByMQTT(message) {\n        // \n        var topicTree = message.destinationName.split('/');\n\n        if (this.name == topicTree[2]) {\n          var messageObject = JSON.parse(message.payloadString);\n\n          try {\n            Object.assign(this.systemState, messageObject);\n          } catch (error) {\n            console.log('Error in parsing systemState JSON');\n            console.log(error);\n          }\n\n          var subtopic = topicTree[3];\n\n          switch (subtopic) {\n            case \"navigation\":\n              try {\n                var _messageObject = JSON.parse(message.payloadString);\n\n                this.updatePosition(Number(_messageObject.position.x), Number(_messageObject.position.y), Number(_messageObject.position.theta));\n              } catch (error) {\n                console.log('Error in parsing Navigation JSON!');\n                console.log(error);\n              }\n\n              break;\n\n            case \"battery\":\n              try {\n                var _messageObject2 = JSON.parse(message.payloadString);\n\n                this.updateBattery(_messageObject2.SoC / 100.0);\n              } catch (error) {\n                console.log('Error in parsing Battery JSON!');\n                console.log(error);\n              }\n\n          }\n        } else {\n          console.log(\"Wrong message forwarded to FTF {this.name}. Adressee: {topicTree[2]}\");\n        }\n      }\n    }, {\n      key: \"queueOrder\",\n      value: function queueOrder(order) {\n        this.orderQueue.push(order);\n      }\n    }, {\n      key: \"handleOrder\",\n      value: function handleOrder() {\n        if (this.busy === true) {\n          return;\n        } else {\n          this.currentOrder = this.orderQueue.shift();\n          this.busy = true;\n        }\n      }\n    }]);\n\n    return FTF;\n  }();\n\n  FTF.count = 0;\n  return FTF;\n})();","map":null,"metadata":{},"sourceType":"module"}